 # Generated by Neurodocker and Reproenv.

FROM ubuntu:20.04
ENV DEBIAN_FRONTEND="noninteractive"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  build-essential \
                  curl \
                  g++ \
                  gcc \
                  git \
                  git-annex \
                  less \
                  nano \
                  npm \
                  num-utils \
                  tig \
                  unzip \
                  yarn \
           && rm -rf /var/lib/apt/lists/*
RUN bash -c 'curl -sL https://deb.nodesource.com/setup_18.x | bash - && apt update && apt-get install -y nodejs && rm -rf /tmp/*'
RUN bash -c 'npm install -g bids-validator@1.14.6 && rm -rf /tmp/*'
ENV FSLDIR="/opt/fsl-6.0.7.4" \
    PATH="/opt/fsl-6.0.7.4/bin:$PATH" \
    FSLOUTPUTTYPE="NIFTI_GZ" \
    FSLMULTIFILEQUIT="TRUE" \
    FSLTCLSH="/opt/fsl-6.0.7.4/bin/fsltclsh" \
    FSLWISH="/opt/fsl-6.0.7.4/bin/fslwish" \
    FSLLOCKDIR="" \
    FSLMACHINELIST="" \
    FSLREMOTECALL="" \
    FSLGECUDAQ="cuda.q"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           ca-certificates \
           curl \
           dc \
           file \
           libfontconfig1 \
           libfreetype6 \
           libgl1-mesa-dev \
           libgl1-mesa-dri \
           libglu1-mesa-dev \
           libgomp1 \
           libice6 \
           libopenblas-base \
           libxcursor1 \
           libxft2 \
           libxinerama1 \
           libxrandr2 \
           libxrender1 \
           libxt6 \
           nano \
           python3 \
           sudo \
           wget \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Installing FSL ..." \
    && curl -fsSL https://fsl.fmrib.ox.ac.uk/fsldownloads/fslconda/releases/fslinstaller.py | python3 - -d /opt/fsl-6.0.7.4 -V 6.0.7.4
ENV CONDA_DIR="/opt/miniconda-latest" \
    PATH="/opt/miniconda-latest/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
    && rm -rf /var/lib/apt/lists/* \
    # Install dependencies.
    && export PATH="/opt/miniconda-latest/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda-latest \
    && rm -f "$conda_installer" \
    && conda update -yq -nbase conda \
    # Prefer packages in conda-forge
    && conda config --system --prepend channels conda-forge \
    # Packages in lower-priority channels not considered if a package with the same
    # name exists in a higher priority channel. Can dramatically speed up installations.
    # Conda recommends this as a default
    # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
    && conda config --set channel_priority strict \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    # Enable `conda activate`
    && conda init bash \
    && conda install -y  --name base \
           "python=3.11" \
           "numpy" \
           "nipype" \
           "nibabel" \
           "pandas" \
           "datalad" \
           "deno" \
    && bash -c "source activate base \
    &&   python -m pip install --no-cache-dir  \
             "tensorflow" \
             "scikit-image" \
             "pydeface==2.0.2" \
             "nobrainer==1.2.1" \
             "quickshear==1.2.0" \
             "datalad-osf" \
             "pybids==0.16.5"" \
    # Clean up
    && sync && conda clean --all --yes && sync \
    && rm -rf ~/.cache/pip/*
ENV PATH="${PATH}:/opt/miniconda-latest/bin"
RUN bash -c 'git config --global user.email 'bidsonym@example.com' && git config --global user.name 'BIDSonym''
RUN bash -c 'cd /opt && mkdir -p nobrainer/models && cd nobrainer/models && datalad clone https://github.com/neuronets/trained-models && cd trained-models && git-annex enableremote osf-storage && datalad get -s osf-storage neuronets/brainy/0.1.0/weights/brain-extraction-unet-128iso-model.h5'
RUN bash -c 'cd /opt && mkdir mri-deface-detector && cd mri-deface-detector && npm install sharp --unsafe-perm && npm install -g mri-deface-detector --unsafe-perm && cd ~'
RUN bash -c 'cd /opt && git clone --filter=blob:none https://github.com/miykael/gif_your_nifti && cd gif_your_nifti && python setup.py install'
RUN bash -c 'cd /opt && git clone --filter=blob:none https://github.com/bids-standard/bids-validator && deno compile -o /usr/local/bin/bids-validator-deno -A  bids-validator/bids-validator/src/bids-validator.ts && cd -'
COPY [".", \
      "/opt/bidsonym-src"]
RUN bash -c 'cd /opt/bidsonym-src && chmod a+x bidsonym/fs_data/mri_deface && pip install -e .'
ENV IS_DOCKER="1"
RUN bash -c 'git config --global safe.directory "*"'
RUN bash -c 'rm -rf /tmp/*'
ENTRYPOINT ["bidsonym"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:20.04" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "git", \
          "num-utils", \
          "gcc", \
          "g++", \
          "curl", \
          "yarn", \
          "build-essential", \
          "nano", \
          "git-annex", \
          "npm", \
          "less", \
          "unzip", \
          "tig" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           build-essential \\\\\\n           curl \\\\\\n           g++ \\\\\\n           gcc \\\\\\n           git \\\\\\n           git-annex \\\\\\n           less \\\\\\n           nano \\\\\\n           npm \\\\\\n           num-utils \\\\\\n           tig \\\\\\n           unzip \\\\\\n           yarn \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "bash -c '"'"'curl -sL https://deb.nodesource.com/setup_18.x | bash - && apt update && apt-get install -y nodejs && rm -rf /tmp/*'"'"'" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "bash -c '"'"'npm install -g bids-validator@1.14.6 && rm -rf /tmp/*'"'"'" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "FSLDIR": "/opt/fsl-6.0.7.4", \
        "PATH": "/opt/fsl-6.0.7.4/bin:$PATH", \
        "FSLOUTPUTTYPE": "NIFTI_GZ", \
        "FSLMULTIFILEQUIT": "TRUE", \
        "FSLTCLSH": "/opt/fsl-6.0.7.4/bin/fsltclsh", \
        "FSLWISH": "/opt/fsl-6.0.7.4/bin/fslwish", \
        "FSLLOCKDIR": "", \
        "FSLMACHINELIST": "", \
        "FSLREMOTECALL": "", \
        "FSLGECUDAQ": "cuda.q" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bc \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    dc \\\\\\n    file \\\\\\n    libfontconfig1 \\\\\\n    libfreetype6 \\\\\\n    libgl1-mesa-dev \\\\\\n    libgl1-mesa-dri \\\\\\n    libglu1-mesa-dev \\\\\\n    libgomp1 \\\\\\n    libice6 \\\\\\n    libopenblas-base \\\\\\n    libxcursor1 \\\\\\n    libxft2 \\\\\\n    libxinerama1 \\\\\\n    libxrandr2 \\\\\\n    libxrender1 \\\\\\n    libxt6 \\\\\\n    nano \\\\\\n    python3 \\\\\\n    sudo \\\\\\n    wget\\nrm -rf /var/lib/apt/lists/*\\n\\necho \\"Installing FSL ...\\"\\ncurl -fsSL https://fsl.fmrib.ox.ac.uk/fsldownloads/fslconda/releases/fslinstaller.py | python3 - -d /opt/fsl-6.0.7.4 -V 6.0.7.4" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda-latest", \
        "PATH": "/opt/miniconda-latest/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda-latest/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda-latest\\nrm -f \\"$conda_installer\\"\\nconda update -yq -nbase conda\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\nconda install -y  --name base \\\\\\n    \\"python=3.11\\" \\\\\\n    \\"numpy\\" \\\\\\n    \\"nipype\\" \\\\\\n    \\"nibabel\\" \\\\\\n    \\"pandas\\" \\\\\\n    \\"datalad\\" \\\\\\n    \\"deno\\"\\nbash -c \\"source activate base\\n  python -m pip install --no-cache-dir  \\\\\\n      \\"tensorflow\\" \\\\\\n      \\"scikit-image\\" \\\\\\n      \\"pydeface==2.0.2\\" \\\\\\n      \\"nobrainer==1.2.1\\" \\\\\\n      \\"quickshear==1.2.0\\" \\\\\\n      \\"datalad-osf\\" \\\\\\n      \\"pybids==0.16.5\\"\\"\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "${PATH}:/opt/miniconda-latest/bin" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "bash -c '"'"'git config --global user.email '"'"'bidsonym@example.com'"'"' && git config --global user.name '"'"'BIDSonym'"'"''"'"'" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "bash -c '"'"'cd /opt && mkdir -p nobrainer/models && cd nobrainer/models && datalad clone https://github.com/neuronets/trained-models && cd trained-models && git-annex enableremote osf-storage && datalad get -s osf-storage neuronets/brainy/0.1.0/weights/brain-extraction-unet-128iso-model.h5'"'"'" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "bash -c '"'"'cd /opt && mkdir mri-deface-detector && cd mri-deface-detector && npm install sharp --unsafe-perm && npm install -g mri-deface-detector --unsafe-perm && cd ~'"'"'" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "bash -c '"'"'cd /opt && git clone --filter=blob:none https://github.com/miykael/gif_your_nifti && cd gif_your_nifti && python setup.py install'"'"'" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "bash -c '"'"'cd /opt && git clone --filter=blob:none https://github.com/bids-standard/bids-validator && deno compile -o /usr/local/bin/bids-validator-deno -A  bids-validator/bids-validator/src/bids-validator.ts && cd -'"'"'" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          ".", \
          "/opt/bidsonym-src" \
        ], \
        "destination": "/opt/bidsonym-src" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "bash -c '"'"'cd /opt/bidsonym-src && chmod a+x bidsonym/fs_data/mri_deface && pip install -e .'"'"'" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "IS_DOCKER": "1" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "bash -c '"'"'git config --global safe.directory \\"*\\"'"'"'" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "bash -c '"'"'rm -rf /tmp/*'"'"'" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "bidsonym" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.
