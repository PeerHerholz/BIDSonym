# Generated by Neurodocker and Reproenv.

FROM bids/base_validator
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  build-essential \
                  curl \
                  g++ \
                  gcc \
                  git \
                  nano \
                  num-utils \
           && rm -rf /var/lib/apt/lists/*
ENV CONDA_DIR="/opt/miniconda-latest" \
    PATH="/opt/miniconda-latest/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
    && rm -rf /var/lib/apt/lists/* \
    # Install dependencies.
    && export PATH="/opt/miniconda-latest/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda-latest \
    && rm -f "$conda_installer" \
    && conda update -yq -nbase conda \
    # Prefer packages in conda-forge
    && conda config --system --prepend channels conda-forge \
    # Packages in lower-priority channels not considered if a package with the same
    # name exists in a higher priority channel. Can dramatically speed up installations.
    # Conda recommends this as a default
    # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
    && conda config --set channel_priority strict \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    # Enable `conda activate`
    && conda init bash \
    && conda create -y  --name bidsonym \
    && conda install -y  --name bidsonym \
           "python=3.10" \
           "numpy" \
           "nipype" \
           "nibabel" \
           "pandas" \
    && bash -c "source activate bidsonym \
    &&   python -m pip install --no-cache-dir  \
             "deepdefacer" \
             "tensorflow" \
             "scikit-image" \
             "pydeface==2.0.2" \
             "nobrainer==0.4.0" \
             "quickshear==1.2.0" \
             "datalad" \
             "datalad-osf"" \
    # Clean up
    && sync && conda clean --all --yes && sync \
    && rm -rf ~/.cache/pip/*
ENV FSLDIR="/opt/fsl-6.0.6.4" \
    PATH="/opt/fsl-6.0.6.4/bin:$PATH" \
    FSLOUTPUTTYPE="NIFTI_GZ" \
    FSLMULTIFILEQUIT="TRUE" \
    FSLTCLSH="/opt/fsl-6.0.6.4/bin/fsltclsh" \
    FSLWISH="/opt/fsl-6.0.6.4/bin/fslwish" \
    FSLLOCKDIR="" \
    FSLMACHINELIST="" \
    FSLREMOTECALL="" \
    FSLGECUDAQ="cuda.q"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           ca-certificates \
           curl \
           dc \
           file \
           libfontconfig1 \
           libfreetype6 \
           libgl1-mesa-dev \
           libgl1-mesa-dri \
           libglu1-mesa-dev \
           libgomp1 \
           libice6 \
           libopenblas-base \
           libxcursor1 \
           libxft2 \
           libxinerama1 \
           libxrandr2 \
           libxrender1 \
           libxt6 \
           nano \
           python3 \
           sudo \
           wget \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Installing FSL ..." \
    && curl -fsSL https://fsl.fmrib.ox.ac.uk/fsldownloads/fslconda/releases/fslinstaller.py | python3 - -d /opt/fsl-6.0.6.4 -V 6.0.6.4
RUN bash -c 'conda init bash'
RUN bash -c 'mkdir -p /opt/nobrainer/models && cd /opt/nobrainer/models && conda activate bidsonym && datalad datalad clone https://github.com/neuronets/trained-models && cd trained-models && git-annex enableremote osf-storage && datalad get -s osf-storage .'
RUN bash -c 'git clone https://github.com/mih/mridefacer'
ENV MRIDEFACER_DATA_DIR="/mridefacer/data"
RUN bash -c 'mkdir /home/mri-deface-detector && cd /home/mri-deface-detector && npm install sharp --unsafe-perm && npm install -g mri-deface-detector --unsafe-perm && cd ~'
RUN bash -c 'git clone https://github.com/miykael/gif_your_nifti && cd gif_your_nifti && source activate bidsonym && python setup.py install'
COPY [".", \
      "/home/bm"]
RUN bash -c 'chmod a+x /home/bm/bidsonym/fs_data/mri_deface'
RUN bash -c 'source activate bidsonym && cd /home/bm && pip install -e .'
ENV IS_DOCKER="1"
WORKDIR /tmp/
ENTRYPOINT ["/neurodocker/startup.sh", "bidsonym"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "bids/base_validator" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "git", \
          "num-utils", \
          "gcc", \
          "g++", \
          "curl", \
          "build-essential", \
          "nano" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           build-essential \\\\\\n           curl \\\\\\n           g++ \\\\\\n           gcc \\\\\\n           git \\\\\\n           nano \\\\\\n           num-utils \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda-latest", \
        "PATH": "/opt/miniconda-latest/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda-latest/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda-latest\\nrm -f \\"$conda_installer\\"\\nconda update -yq -nbase conda\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\nconda create -y  --name bidsonym\\nconda install -y  --name bidsonym \\\\\\n    \\"python=3.10\\" \\\\\\n    \\"numpy\\" \\\\\\n    \\"nipype\\" \\\\\\n    \\"nibabel\\" \\\\\\n    \\"pandas\\"\\nbash -c \\"source activate bidsonym\\n  python -m pip install --no-cache-dir  \\\\\\n      \\"deepdefacer\\" \\\\\\n      \\"tensorflow\\" \\\\\\n      \\"scikit-image\\" \\\\\\n      \\"pydeface==2.0.2\\" \\\\\\n      \\"nobrainer==0.4.0\\" \\\\\\n      \\"quickshear==1.2.0\\" \\\\\\n      \\"datalad\\" \\\\\\n      \\"datalad-osf\\"\\"\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "FSLDIR": "/opt/fsl-6.0.6.4", \
        "PATH": "/opt/fsl-6.0.6.4/bin:$PATH", \
        "FSLOUTPUTTYPE": "NIFTI_GZ", \
        "FSLMULTIFILEQUIT": "TRUE", \
        "FSLTCLSH": "/opt/fsl-6.0.6.4/bin/fsltclsh", \
        "FSLWISH": "/opt/fsl-6.0.6.4/bin/fslwish", \
        "FSLLOCKDIR": "", \
        "FSLMACHINELIST": "", \
        "FSLREMOTECALL": "", \
        "FSLGECUDAQ": "cuda.q" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bc \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    dc \\\\\\n    file \\\\\\n    libfontconfig1 \\\\\\n    libfreetype6 \\\\\\n    libgl1-mesa-dev \\\\\\n    libgl1-mesa-dri \\\\\\n    libglu1-mesa-dev \\\\\\n    libgomp1 \\\\\\n    libice6 \\\\\\n    libopenblas-base \\\\\\n    libxcursor1 \\\\\\n    libxft2 \\\\\\n    libxinerama1 \\\\\\n    libxrandr2 \\\\\\n    libxrender1 \\\\\\n    libxt6 \\\\\\n    nano \\\\\\n    python3 \\\\\\n    sudo \\\\\\n    wget\\nrm -rf /var/lib/apt/lists/*\\n\\necho \\"Installing FSL ...\\"\\ncurl -fsSL https://fsl.fmrib.ox.ac.uk/fsldownloads/fslconda/releases/fslinstaller.py | python3 - -d /opt/fsl-6.0.6.4 -V 6.0.6.4" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "bash -c '"'"'conda init bash'"'"'" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "bash -c '"'"'mkdir -p /opt/nobrainer/models && cd /opt/nobrainer/models && conda activate bidsonym && datalad datalad clone https://github.com/neuronets/trained-models && cd trained-models && git-annex enableremote osf-storage && datalad get -s osf-storage .'"'"'" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "bash -c '"'"'git clone https://github.com/mih/mridefacer'"'"'" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "MRIDEFACER_DATA_DIR": "/mridefacer/data" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "bash -c '"'"'mkdir /home/mri-deface-detector && cd /home/mri-deface-detector && npm install sharp --unsafe-perm && npm install -g mri-deface-detector --unsafe-perm && cd ~'"'"'" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "bash -c '"'"'git clone https://github.com/miykael/gif_your_nifti && cd gif_your_nifti && source activate bidsonym && python setup.py install'"'"'" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          ".", \
          "/home/bm" \
        ], \
        "destination": "/home/bm" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "bash -c '"'"'chmod a+x /home/bm/bidsonym/fs_data/mri_deface'"'"'" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "bash -c '"'"'source activate bidsonym && cd /home/bm && pip install -e .'"'"'" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "IS_DOCKER": "1" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/tmp/" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh", \
          "bidsonym" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.
