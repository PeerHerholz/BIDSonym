# Generated by Neurodocker version 0.5.0
# Timestamp: 2020-09-16 16:07:33 UTC
# 
# Thank you for using Neurodocker. If you discover any issues
# or ways to improve this software, please submit an issue or
# pull request on our GitHub repository:
# 
#     https://github.com/kaczmarj/neurodocker

Bootstrap: docker
From: neurodebian:stretch-non-free

%post
export ND_ENTRYPOINT="/neurodocker/startup.sh"
apt-get update -qq
apt-get install -y -q --no-install-recommends \
    apt-utils \
    bzip2 \
    ca-certificates \
    curl \
    locales \
    unzip
apt-get clean
rm -rf /var/lib/apt/lists/*
sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
dpkg-reconfigure --frontend=noninteractive locales
update-locale LANG="en_US.UTF-8"
chmod 777 /opt && chmod a+s /opt
mkdir -p /neurodocker
if [ ! -f "$ND_ENTRYPOINT" ]; then
  echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT"
  echo 'set -e' >> "$ND_ENTRYPOINT"
  echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT"
  echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT";
fi
chmod -R 777 /neurodocker && chmod a+s /neurodocker

apt-get update -qq
apt-get install -y -q --no-install-recommends \
    fsl-complete \
    git \
    num-utils \
    gcc \
    g++ \
    curl \
    build-essential
apt-get clean
rm -rf /var/lib/apt/lists/*

bash -c 'curl -sL https://deb.nodesource.com/setup_10.x | bash - && apt-get install -y nodejs && apt-get install -y npm'

sed -i '$isource /etc/fsl/fsl.sh' $ND_ENTRYPOINT

export PATH="/opt/miniconda-latest/bin:$PATH"
echo "Downloading Miniconda installer ..."
conda_installer="/tmp/miniconda.sh"
curl -fsSL --retry 5 -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
bash "$conda_installer" -b -p /opt/miniconda-latest
rm -f "$conda_installer"
conda update -yq -nbase conda
conda config --system --prepend channels conda-forge
conda config --system --set auto_update_conda false
conda config --system --set show_channel_urls true
sync && conda clean --all && sync
conda create -y -q --name bidsonym
conda install -y -q --name bidsonym \
    'python=3.6' \
    'numpy' \
    'nipype' \
    'nibabel' \
    'pandas'
sync && conda clean --all && sync
bash -c "source activate bidsonym
  pip install --no-cache-dir  \
      'deepdefacer' \
      'tensorflow' \
      'scikit-image'"
rm -rf ~/.cache/pip/*
sync
sed -i '$isource activate bidsonym' $ND_ENTRYPOINT


bash -c 'source activate bidsonym && git clone https://github.com/poldracklab/pydeface.git && cd pydeface && python setup.py install && cd -'

bash -c 'source activate bidsonym && git clone https://github.com/nipy/quickshear.git  && cd quickshear && python setup.py install && cd -'

bash -c 'source activate bidsonym && git clone https://github.com/neuronets/nobrainer.git  && cd nobrainer && python setup.py install && cd -'

bash -c 'mkdir -p /opt/nobrainer/models && cd /opt/nobrainer/models && curl -LJO  https://github.com/neuronets/nobrainer-models/releases/download/0.1/brain-extraction-unet-128iso-model.h5 && cd ~ '

bash -c 'git clone https://github.com/mih/mridefacer'

bash -c 'rm -r /usr/share/fsl/data/atlases && rm -r /usr/share/fsl/data/first && rm -r /usr/share/fsl/data/possum'

bash -c 'npm install -g bids-validator@1.5.4'

bash -c 'mkdir /home/mri-deface-detector && cd /home/mri-deface-detector && npm install sharp --unsafe-perm && npm install -g mri-deface-detector --unsafe-perm && cd ~'

bash -c 'git clone https://github.com/miykael/gif_your_nifti && cd gif_your_nifti && source activate bidsonym && python setup.py install'

bash -c 'chmod a+x /home/bm/bidsonym/fs_data/mri_deface'

bash -c 'source activate bidsonym && cd /home/bm && pip install -e .'

cd /tmp/

echo '{
\n  "pkg_manager": "apt",
\n  "instructions": [
\n    [
\n      "base",
\n      "neurodebian:stretch-non-free"
\n    ],
\n    [
\n      "_header",
\n      {
\n        "version": "generic",
\n        "method": "custom"
\n      }
\n    ],
\n    [
\n      "install",
\n      [
\n        "fsl-complete",
\n        "git",
\n        "num-utils",
\n        "gcc",
\n        "g++",
\n        "curl",
\n        "build-essential"
\n      ]
\n    ],
\n    [
\n      "run_bash",
\n      "curl -sL https://deb.nodesource.com/setup_10.x | bash - && apt-get install -y nodejs && apt-get install -y npm"
\n    ],
\n    [
\n      "add_to_entrypoint",
\n      "source /etc/fsl/fsl.sh"
\n    ],
\n    [
\n      "env",
\n      {
\n        "FSLDIR": "/usr/share/fsl/5.0",
\n        "FSLOUTPUTTYPE": "NIFTI_GZ",
\n        "FSLMULTIFILEQUIT": "TRUE",
\n        "POSSUMDIR": "/usr/share/fsl/5.0",
\n        "LD_LIBRARY_PATH": "/usr/lib/fsl/5.0:",
\n        "FSLTCLSH": "/usr/bin/tclsh",
\n        "FSLWISH": "/usr/bin/wish",
\n        "PATH": "/usr/lib/fsl/5.0:/Users/peerherholz/anaconda3/bin:/Users/peerherholz/anaconda3/condabin:/Users/peerherholz/abin:/usr/local/antsbin/bin:/Applications/MATLAB_R2014a.app/bin:/Applications/freesurfer/bin:/Applications/freesurfer/fsfast/bin:/usr/local/fsl/bin:/Applications/freesurfer/mni/bin:/usr/local/fsl/bin:/Users/peerherholz/anaconda3/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/Applications/workbench/bin_macosx64:/usr/local/texlive/2019/bin/x86_64-darwin"
\n      }
\n    ],
\n    [
\n      "miniconda",
\n      {
\n        "conda_install": [
\n          "python=3.6",
\n          "numpy",
\n          "nipype",
\n          "nibabel",
\n          "pandas"
\n        ],
\n        "pip_install": [
\n          "deepdefacer",
\n          "tensorflow",
\n          "scikit-image"
\n        ],
\n        "create_env": "bidsonym",
\n        "activate": true
\n      }
\n    ],
\n    [
\n      "run_bash",
\n      "source activate bidsonym && git clone https://github.com/poldracklab/pydeface.git && cd pydeface && python setup.py install && cd -"
\n    ],
\n    [
\n      "run_bash",
\n      "source activate bidsonym && git clone https://github.com/nipy/quickshear.git  && cd quickshear && python setup.py install && cd -"
\n    ],
\n    [
\n      "run_bash",
\n      "source activate bidsonym && git clone https://github.com/neuronets/nobrainer.git  && cd nobrainer && python setup.py install && cd -"
\n    ],
\n    [
\n      "run_bash",
\n      "mkdir -p /opt/nobrainer/models && cd /opt/nobrainer/models && curl -LJO  https://github.com/neuronets/nobrainer-models/releases/download/0.1/brain-extraction-unet-128iso-model.h5 && cd ~ "
\n    ],
\n    [
\n      "run_bash",
\n      "git clone https://github.com/mih/mridefacer"
\n    ],
\n    [
\n      "env",
\n      {
\n        "MRIDEFACER_DATA_DIR": "/mridefacer/data"
\n      }
\n    ],
\n    [
\n      "run_bash",
\n      "rm -r /usr/share/fsl/data/atlases && rm -r /usr/share/fsl/data/first && rm -r /usr/share/fsl/data/possum"
\n    ],
\n    [
\n      "run_bash",
\n      "npm install -g bids-validator@1.5.4"
\n    ],
\n    [
\n      "run_bash",
\n      "mkdir /home/mri-deface-detector && cd /home/mri-deface-detector && npm install sharp --unsafe-perm && npm install -g mri-deface-detector --unsafe-perm && cd ~"
\n    ],
\n    [
\n      "run_bash",
\n      "git clone https://github.com/miykael/gif_your_nifti && cd gif_your_nifti && source activate bidsonym && python setup.py install"
\n    ],
\n    [
\n      "copy",
\n      [
\n        "bidsonym/",
\n        "/home/bm"
\n      ]
\n    ],
\n    [
\n      "copy",
\n      [
\n        "setup.py",
\n        "/home/bm"
\n      ]
\n    ],
\n    [
\n      "copy",
\n      [
\n        "setup.cfg",
\n        "/home/bm"
\n      ]
\n    ],
\n    [
\n      "copy",
\n      [
\n        "versioneer.py",
\n        "/home/bm"
\n      ]
\n    ],
\n    [
\n      "copy",
\n      [
\n        "MANIFEST.in",
\n        "/home/bm"
\n      ]
\n    ],
\n    [
\n      "copy",
\n      [
\n        "LICENSE",
\n        "/home/bm"
\n      ]
\n    ],
\n    [
\n      "run_bash",
\n      "chmod a+x /home/bm/bidsonym/fs_data/mri_deface"
\n    ],
\n    [
\n      "run_bash",
\n      "source activate bidsonym && cd /home/bm && pip install -e ."
\n    ],
\n    [
\n      "copy",
\n      [
\n        "example_data",
\n        "/home/bidsonym/example_data"
\n      ]
\n    ],
\n    [
\n      "env",
\n      {
\n        "IS_DOCKER": "1"
\n      }
\n    ],
\n    [
\n      "workdir",
\n      "/tmp/"
\n    ],
\n    [
\n      "entrypoint",
\n      "/neurodocker/startup.sh  bidsonym"
\n    ]
\n  ]
\n}' > /neurodocker/neurodocker_specs.json

%environment
export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"
export ND_ENTRYPOINT="/neurodocker/startup.sh"
export FSLDIR="/usr/share/fsl/5.0"
export FSLOUTPUTTYPE="NIFTI_GZ"
export FSLMULTIFILEQUIT="TRUE"
export POSSUMDIR="/usr/share/fsl/5.0"
export LD_LIBRARY_PATH="/usr/lib/fsl/5.0:"
export FSLTCLSH="/usr/bin/tclsh"
export FSLWISH="/usr/bin/wish"
export PATH="/usr/lib/fsl/5.0:/Users/peerherholz/anaconda3/bin:/Users/peerherholz/anaconda3/condabin:/Users/peerherholz/abin:/usr/local/antsbin/bin:/Applications/MATLAB_R2014a.app/bin:/Applications/freesurfer/bin:/Applications/freesurfer/fsfast/bin:/usr/local/fsl/bin:/Applications/freesurfer/mni/bin:/usr/local/fsl/bin:/Users/peerherholz/anaconda3/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/Applications/workbench/bin_macosx64:/usr/local/texlive/2019/bin/x86_64-darwin"
export CONDA_DIR="/opt/miniconda-latest"
export PATH="/opt/miniconda-latest/bin:$PATH"
export MRIDEFACER_DATA_DIR="/mridefacer/data"
export IS_DOCKER="1"

%files
bidsonym/ /home/bm
setup.py /home/bm
setup.cfg /home/bm
versioneer.py /home/bm
MANIFEST.in /home/bm
LICENSE /home/bm
example_data /home/bidsonym/example_data

%runscript
/neurodocker/startup.sh  bidsonym
